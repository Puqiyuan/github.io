#+TITLE: 内核调试手段及工具
#+AUTHOR: Cauchy(pqy7172@gmail.com)
#+EMAIL: pqy7172@gmail.com
#+HTML_HEAD: <link rel="stylesheet" href="../../org-manual.css" type="text/css">
#+OPTIONS: ^:nil
本文介绍内核调试的各种技术，想要指出的是工具或手段都只是一个途径，它不会决定对于问题的本质理解。深刻理解内核的基础，再加以熟练于工具，才能高效而又准确的发现问题根因。

内核编程有它自己的独一无二的调试困难。内核代码不容易在调试器中运行，它也不容易被trace，因为它不是一个进程。内核代码的error也是极其难以复现的。本文会介绍一些技术用来排查内核bug。

内核带有一些调试的feature，这需要自己编译内核打开选项．下面介绍一些这些选项，注意不是所有的选项在所有的架构都支持．

+ CONFIG_DEBUG_KERNEL

  这个选项仅是使得其它调试选项可提供，它应该被打开以使得其它选项可用．
+ CONFIG_DEBUG_SLAB

  这个选项用来检查内核内存分配．打开时就可以检测到超限使用和错误初始化的错误．每个分配出去的内存字节在交给调用者前都会设置为0xa5，而在释放后又会设置为0x6b．另外内核也会在分配的对象前后放置上特别的保护值（guard values），如果这些特别的值被改变，那么内核就知道有人在超出限制的使用分配的内存，就会严重警告．另外还有一些其它的检查．

+ CONFIG_DEBUG_PAGEALLOC

  当页面从内核地址空间释放时，全部的页面都会释放．这会减慢一些效率，但是对某些内存污染问题可以较快的定位出来．

+ CONFIG_DEBUG_SPINLOCK

  打开这个选项时，内核会捕获未初始化的spinlock以及各种各样的其它错误，比如unlock一个锁两次．

+ CONFIG_DEBUG_SPINLOCK_SLEEP

  这个选项会检查，当持有一个spinlock时却尝试睡眠．

+ CONFIG_INIT_DEBUG

  在系统完成初始化或模块加载后，标记为__init或__initdata的项目就会被丢弃．这个选项使得在初始化完成后再访问初始化期间的内存成为可能．

+ CONFIG_DEBUG_INFO

  该选项会使得内核包含最为完整的debug信息．如果打算用gdb的话，就可以打开这个选项．

+ CONFIG_MAGIC_SYSRQ

  打开SysRq键，后面会具体介绍SysRq键．

+ CONFIG_DEBUG_STACKOVERFLOW
+ CONFIG_DEBUG_STACK_USAGE

  这些选项有助于追踪内核栈溢出．首先是添加溢出检查到内核，其次是可以通过SysRq键来监视栈使用情况和一些统计工作．

+ CONFIG_KALLSYMS

  该选项（在"General setup/Standard features"下）可以导出内核的符号信息．没有这些符号信息，内核的trace信息就是十六进制了，没有多大用处．

+ CONFIG_ACPI_DEBUG
  在"Power management/ACPI"下．该选项可以输出详细的ACPI详细，在怀疑问题来自ACPI相关时比较有用．

+ CONFIG_DEBUG_DRIVER

  在"Device drivers"下，打开核心驱动的调试信息，在调试地层代码时比较有用，后面还会介绍核心驱动．

+ CONFIG_SCSI_CONSTANTS

  在"Device drivers/SCSI　device support"下，用于输出详细的SCSI错误信息．在调试SCSI驱动时，这个选项比较有用．

+ CONFIG_INPUT_EVBUG

  在"Device drivers/Input device support"下，可以打印输入事件的详细信息．如果在调试一个输入设备的驱动时，这个选项可以打开．但是这个选项是有潜在的安全风险的，它会记录你键入的任何输入，包括密码．

+ CONFIG_PROFILING

  在"Profiling support"下．Profiling主要用于调测系统性能，但有时也可以用来追踪某些内核挂住的问题．

后面在追踪各种内核问题时会重新调查这些选项．不过先可以先看看经典的内核调试技术：打印．

内核调试的打印函数是printk．printk和printf类似，不过也有一些不一样的地方，其中一个不同就是，printk可以依据问题严重程度来归类不同的log，也就是loglevels．通常用宏来表示loglevels，比如KERN_INFO．总共有8种可能的loglevel，定义在<linux/kernel.h>，这里按递减的严重性列出：

+ KERN_EMERG
  
  用于紧急信息，通常其后就是crash了．

+ KERN_ALERT

  需要立即处理的情形．

+ KERN_CRIT

  通常意味着严重的硬件或软件问题．

+ KERN_ERR

  报告错误状态，设备驱动通常是用这个来报告硬件错误．

+ KERN_WARNING

  一种警告，通常并不是有严重的问题．

+ KERN_NOTICE

  在正常的情况下，但是依旧需要注意下，一些安全相关的事项在这个级别上打印日志．

+ KERN_INFO

  打印一些消息．许多驱动在启动时会在这个级别上打印一下它们发现的硬件．

+ KERN_DEBUG

  用来打印debug信息．

基于loglevel，内核或许会把消息打印到当前console，可以是文本终端，串口，或者串行打印机．如果权限小于整数变量console_loglevel（通过tags很容易找见它的定义为#define
CONFIG_CONSOLE_LOGLEVEL_DEFAULT 7），消息一次一行的打印出来．如果系统里运行着klogd和syslogd的话，内核消息就会附加到/var/log/messages文件里，这时和console_loglevel是独立的．如果klogd没有运行的话，消息不会传递到用户空间，当然读/proc/kmsg（dmesg命令）是另一种方式来获得内核打印信息．使用klogd时，连续相同的行，仅保留第一次出现的．

读或写终端log level也可以通过/proc/sys/kernel/printk．这个文件包括四个整数，当前的loglevel，
对于没有显示指明loglevel的默认level．最小可能的loglevel，启动时的默认level．向这个文件写单
个值，改变的是当前的loglevel．举个例子，下面的命令可以使得所有的内核消息打印在终端：
: echo 8 > /proc/sys/kernel/printk


